spring.application.name=KidsLink

server.servlet.encoding.enabled=true
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true
server.tomcat.uri-encoding=UTF-8

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/kidslink?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:ssafy}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:ssafy}
spring.data.redis.host=${SPRING_DATA_REDIS_HOST:localhost}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT:6379}

spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jwt.secret=${SPRING_JWT_SECRET:bumsoosososososososossoossosososoososososossoo}

# S3 config
cloud.aws.s3.bucket=${CLOUD_AWS_S3_BUCKET:bucket_name}
cloud.aws.stack.auto=false
cloud.aws.region.static=${AWS_REGION:ap-northeast-2}
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY_ID:access_key}
cloud.aws.credentials.secret-key=${AWS_SECRET_ACCESS_KEY:secret_key}
use.s3=${USE_S3:false}

spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}
frontend.server.url=${FRONTEND_URL:http://localhost:5173}

file.upload-dir=${UPLOAD_DIR:C:/uploads}
file.max-size=${FILE_MAX_SIZE:5242880}

spring.servlet.multipart.max-file-size=${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:20MB}
spring.servlet.multipart.max-request-size=${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:200MB}

#spring.profiles.active=@profile@

#spring.security.oauth2.client.registration.naver.client-name=naver
#spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.naver.scope=name,email
#
#spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
#spring.security.oauth2.client.providimport { OpenVidu, Publisher, Session, StreamEvent, StreamManager, Subscriber } from "openvidu-browser";
#import React, { ChangeEvent, useEffect, useState } from "react";
#import OpenViduVideoComponent from "../../components/openvidu/Ovvideo";
#import MeetingFooter from "../../components/openvidu/MeetingFooter";
#import { getToken, handleSpeechRecognition } from "../../api/openvidu";
#import TeacherHeader from "../../components/teacher/common/TeacherHeader";
#import axios from 'axios';
#
#const APPLICATION_SERVER_URL = "http://localhost:8080/api/video"
#
#interface User {
#  sessionId?: string;
#  username: string;
#}
#
#interface OpenViduState {
#  session?: Session;
#  mainStreamManager?: StreamManager;
#  publisher?: Publisher;
#  subscribers: Subscriber[];
#}
#
#interface TabState {
#  formTab: boolean;
#  profileTab: boolean;
#  chatTab: boolean;
#}
#
#interface ControlState {
#  video: boolean;
#  mic: boolean;
#  muted: boolean;
#  volume: number;
#}
#
#interface Recording {
#  id: string;
#  name: string;
#  url: string; // Assuming the URL to access the recording is available
#}
#
#export default function TeacherBroadcast() {
#  const [user, setUser] = useState<User>({
#    sessionId: undefined,
#    username: "user1",
#  });
#  const [openvidu, setOpenvidu] = useState<OpenViduState>({
#    session: undefined,
#    mainStreamManager: undefined,
#    publisher: undefined,
#    subscribers: [],
#  });
#  const [tabOpen, setTabOpen] = useState<TabState>({
#    formTab: false,
#    profileTab: false,
#    chatTab: false,
#  });
#  const [control, setControl] = useState<ControlState>({
#    video: false,
#    mic: false,
#    muted: false,
#    volume: 0.2,
#  });
#  const [recordings, setRecordings] = useState<Recording[]>([]);
#
#  useEffect(() => {
#    // sessionId 받아오기
#    setUser((prevUser) => ({ ...prevUser, sessionId: "sessionC" }));
#    return () => {
#      leaveSession();
#    };
#  }, []);
#
#  useEffect(() => {
#    // 녹화 파일 목록 불러오기
#    fetchRecordings();
#  }, []);
#
#  useEffect(() => {
#    if (openvidu.publisher) {
#      openvidu.publisher.publishAudio(control.mic);
#      openvidu.publisher.publishVideo(control.video);
#    }
#  }, [control, openvidu.publisher]);
#
#  const handleUserChange = (event: ChangeEvent<HTMLInputElement>) => {
#    setUser((prevUser) => ({
#      ...prevUser,
#      [event.target.name]: event.target.value,
#    }));
#  };
#
#  const leaveSession = () => {
#    if (openvidu.session) {
#      openvidu.session.disconnect();
#      setOpenvidu((prevOpenvidu) => ({
#        ...prevOpenvidu,
#        session: undefined,
#        mainStreamManager: undefined,
#        publisher: undefined,
#        subscribers: [],
#      }));
#    }
#  };
#
#  const joinSession = async () => {
#    if (!user.sessionId) return;
#    const OV = new OpenVidu();
#    OV.enableProdMode();
#    const session = OV.initSession();
#
#    // 이벤트 등록
#    session.on("streamCreated", (event: StreamEvent) => {
#      try {
#        const subscriber = session.subscribe(event.stream, undefined);
#        setOpenvidu((prevOpenvidu) => ({
#          ...prevOpenvidu,
#          subscribers: [...prevOpenvidu.subscribers, subscriber],
#        }));
#      } catch (error) {
#        console.error("Error during stream subscription:", error);
#      }
#    });
#
#    session.on("streamDestroyed", (event: StreamEvent) => {
#      setOpenvidu((prevOpenvidu) => {
#        const streamManager = event.stream.streamManager;
#        return {
#          ...prevOpenvidu,
#          subscribers: prevOpenvidu.subscribers.filter((sub) => sub !== streamManager),
#        };
#      });
#    });
#
#    session.on("exception", (exception) => {
#      console.warn(exception);
#    });
#    const token = await getToken(user.sessionId);
#
#    session
#      .connect(token, { clientData: user.username })
#      .then(async () => {
#        const publisher = await OV.initPublisherAsync(undefined, {
#          audioSource: undefined,
#          videoSource: undefined,
#          publishAudio: true,
#          publishVideo: true,
#          resolution: "1260x720",
#          frameRate: 30,
#          insertMode: "REPLACE",
#          mirror: true,
#        });
#        session.publish(publisher);
#        setOpenvidu((p) => ({
#          ...p,
#          session: session,
#          mainStreamManager: publisher,
#          publisher: publisher,
#        }));
#
#        // 음성 인식 및 비속어 감지 시작
#        await handleSpeechRecognition(user.sessionId);
#      })
#      .catch((error) => {
#        console.error("Error connecting to the session:", error);
#      });
#  };
#
#  const fetchRecordings = async () => {
#    try {
#      const response = await axios.get(`${APPLICATION_SERVER_URL}/recordings`);
#      setRecordings(response.data);
#    } catch (error) {
#      console.error('Error fetching recordings:', error);
#    }
#  };
#
#  return (
#    <div className="bg-gray-300 flex flex-col justify-center items-center m-auto w-screen h-screen min-w-[1000px] overflow-hidden">
#      <TeacherHeader />
#      {openvidu.session ? (
#        <div className="flex w-full h-full">
#          <div className="relative flex flex-col justify-center items-center w-full h-full">
#            <div className="absolute top-[150px] left-0 w-[700px] h-auto rounded-lg border border-black">
#              {/* 내 화면 */}
#              <h1>내 화면</h1>
#              {openvidu.mainStreamManager && (
#                <OpenViduVideoComponent streamManager={openvidu.mainStreamManager} />
#              )}
#            </div>
#            <div className="absolute top-[150px] right-0 w-[700px] h-auto rounded-lg border border-black">
#              <h1>상대 화면</h1>
#              {openvidu.subscribers.map((sub, i) => (
#                <OpenViduVideoComponent
#                  key={i}
#                  streamManager={sub}
#                  muted={control.muted}
#                  volume={control.volume}
#                />
#              ))}
#            </div>
#          </div>
#        </div>
#      ) : (
#        <div className="flex flex-col justify-center items-center w-full h-full">
#          <input
#            name="sessionId"
#            value={user.sessionId || ""}
#            onChange={handleUserChange}
#          />
#          <input
#            name="username"
#            value={user.username || ""}
#            onChange={handleUserChange}
#          />
#          <button onClick={joinSession}>연결</button>
#        </div>
#      )}
#      <MeetingFooter
#        control={control}
#        handleControl={setControl}
#        close={leaveSession}
#      />
#
#      {/* 녹화 파일 목록 추가 */}
#      <div className="recordings-list mt-4">
#        <h2>녹화 파일 목록</h2>
#        <ul>
#          {recordings.map((recording) => (
#            <li key={recording.id}>
#              {recording.name} - <a href={recording.url} target="_blank" rel="noopener noreferrer">다운로드</a>
#            </li>
#          ))}
#        </ul>
#      </div>
#    </div>
#  );
#}er.naver.token-uri=https://nid.naver.com/oauth2.0/token
#spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
#spring.security.oauth2.client.provider.naver.user-name-attribute=response
#
#spring.security.oauth2.client.registration.google.client-name=google
#spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.google.scope=profile,email
#
## OAuth2 \uD658\uACBD\uBCC0\uC218
#spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
#spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}

# URL 변경 필요 openvidu.url=https://kidslink.xyz:8443
openvidu.url=http://localhost:4443/
openvidu.secret=MY_SECRET
# Enable recording
openvidu.recording=true
openvidu.recording.enabled=true
# Recording path
openvidu.recording.path=opt/openvidu/recordings

# Maximum recording duration in seconds (default: 3600 seconds - 1 hour)
openvidu.recording.max-length=3600
